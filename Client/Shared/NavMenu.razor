@using ChatApp.Shared.Models
@using ChatApp.Shared;
@using ChatApp.Client.Models
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager NavigationManager
@inject HubUtility HubUtility
@inject IHttpClientFactory IHttpClientFactory
@inject IRoomManager RoomManager

<style>
    .scroll-y {
        overflow-y: auto;
        height: 90vh;
    }
</style>

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand mr-1" href="">
        <img src="SignalRLogo.ico" width="30px" height="30px" class="mr-2" />
        Realtime Chat
    </a>
    <button class="navbar-toggler px-1" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass scroll-y" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> ロビー
            </NavLink>
        </li>
        <AuthorizeView>
            <Authorized>
                <li class="nav-item px-3">@_mentionMessage</li>
                @foreach (var room in indexModel.RoomModels)
                {
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href=@("chat/" + room.RoomId) Match="NavLinkMatch.All">
                            <span class="oi oi-document" aria-hidden="true"></span>@room.RoomName
                        </NavLink>
                    </li>
                }
            </Authorized>
        </AuthorizeView>
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private HubConnection _hubConnection;

    private string _mentionMessage;

    private IndexModel indexModel;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authenticationStateTask;

        if (authState.User.Identity.IsAuthenticated)
        {
            indexModel = new IndexModel(IHttpClientFactory);

            await indexModel.GetUserBelongedRoomsAsync();

            StateHasChanged();
        }

        _hubConnection = HubUtility.CreateHubConnection();

        _hubConnection.On<string>(SignalRMehod.SendMention, (string content) =>
        {
            _mentionMessage = content;
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    public void OnRoomsChanged(Object sender, List<RoomModel> e) => StateHasChanged();

    public void Dispose()
    {
        indexModel.RoomListChanged -= OnRoomsChanged;
        _ = _hubConnection.DisposeAsync();
    }
}