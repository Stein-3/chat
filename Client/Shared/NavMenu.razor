@using blazorTest.Shared.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject IRoomManager RoomManager

<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Realtime Chat</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> ロビー
            </NavLink>
        </li>
        <AuthorizeView>
            <Authorized>
                @foreach (var room in rooms)
                {
                    <li class="nav-item px-3">
                        <NavLink class="nav-link" href=@("chat/" + room.Id) Match="NavLinkMatch.All">
                            <span class="oi oi-document" aria-hidden="true"></span>@room.Name
                        </NavLink>
                    </li>
                }
            </Authorized>
        </AuthorizeView>
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private List<UserRoom> rooms = new List<UserRoom>();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async Task OnParametersSetAsync()
    {
        var authState = await authenticationStateTask;

        if (authState.User.Identity.IsAuthenticated)
        {
            RoomManager.RoomChanged += (s, e) =>
            {
                rooms = e;
                StateHasChanged();
            };
            await UpdateRooms();
        }
    }

    public async Task OnRoomsChanged() => await UpdateRooms();

    private async Task UpdateRooms()
    {
        RoomManager.RaiseRoomChanged(this, await HttpClient.GetFromJsonAsync<List<UserRoom>>("Room"));
    }

}