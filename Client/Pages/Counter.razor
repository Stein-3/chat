@page "/counter"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json
@using blazorTest.Shared;
@using blazorTest.Shared.Models;
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
@implements IDisposable

<AuthorizeView>
    <Authorized>
        <div class="form-group">
            <label>
                Message:
                <input @bind="messageInput" size="50" />
            </label>
        </div>
        <button @onclick="Send" disabled="@(!IsConnected)">Send</button>

        <hr />

        <ul id="messageList">
            @foreach (var chatPost in chatPosts)
            {
                <li>@chatPost.Keys : @chatPost.Values</li>
            }
        </ul>
    </Authorized>
</AuthorizeView>

@code {
    private HubConnection hubConnection;

    private List<string> messages = new List<string>();
    private List<Dictionary<string, string>> chatPosts =
        new List<Dictionary<string, string>>();

    private string messageInput;
    private Guid roomId =
        new Guid("30677F2A-5615-4D11-3639-08D888932F58"); //TODO 動作確認用

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<Message>(
            SignalRMehod.receiveMessage, (message) =>
            {
                var encodedMsg = $"{message.handleName}: {message.messageContext}";
                messages.Add(encodedMsg);
                StateHasChanged();
            });

        await hubConnection.StartAsync();

        var nowDate = DateTime.Now;
        var request = new ChatPostPostRequest() { roomId = roomId, needMessageTailDate = nowDate };

        var response = await HttpClient
            .PostAsJsonAsync<ChatPostPostRequest>("GetPost", request);

        chatPosts = await response.Content
            .ReadFromJsonAsync<List<Dictionary<String, string>>>();

    }

    async Task Send()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var message = new Message()
        {
            userEmail = authState.User.Identity.Name,
            messageContext = messageInput,
            roomId = roomId
        };

        await hubConnection.SendAsync(
            SignalRMehod.sendMessage, message);
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

}