@page "/chat/{roomId:guid}"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json
@using blazorTest.Shared;
@using blazorTest.Shared.Models;
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
@implements IDisposable

<style type="text/css">
    .layout {
        display: grid;
        height: calc(100vh - 100px);
        grid-template-columns: 1fr;
        grid-template-rows: calc(100vh - 150px) 50px; /* adjustment */
    }

    .content {
        grid-column: 1;
        grid-row: 1;
        overflow-y: auto;
    }

    .input {
        grid-column: 1;
        grid-row: 2;
    }

    .margin {
        margin: 8px;
    }

    .margin-left {
        margin-left: 8px;
    }

    .inputbox {
        height: 48px;
    }
</style>

<div class="layout">
    <AuthorizeView>
        <Authorized>
            <div class="content margin-left">
                @foreach (var message in Messages)
                {
                    <div id="@message.Id" class="margin">
                        <PostItem Name="@message.HandleName" Message="@message.MessageContext" />
                    </div>
                }
            </div>
            <div class="form-group margin-left input">
                <div class="row margin">
                    <textarea class="col margin inputbox" value="@_messageInput" @oninput="OnInput" @onkeydown="OnKeyDown" id="messageInput" />
                    <button class="col-md-auto margin btn btn-primary" id="sender" @onclick="Send">送信(Alt+Enter)</button>
                </div>
            </div>
            <AnchorNavigation />
        </Authorized>
    </AuthorizeView>
</div>

@code {
    private HubConnection _hubConnection;

    private string _messageInput;

    List<Message> _messages = new List<Message>();

    private List<Message> Messages
    {
        get => _messages;
        set
        {
            _messages = value;
            StateHasChanged();
        }
    }

    private string _fragment;

    private Guid _roomId;

    [Parameter]
    public Guid RoomId
    {
        get => _roomId;
        set
        {
            if (_roomId == value)
                return;

            _roomId = value;
            _fragment = null;
            Messages = new List<Message>();
        }
    }

    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        _hubConnection.On<Message>(SignalRMehod.ReceiveMessage, (message) =>
        {
            if (message.RoomId != _roomId)
                return;

            Messages.Add(message);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (string.IsNullOrEmpty(_fragment))
            await RefreshAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        NavigateToLast();
        await Focus("messageInput");
    }

    private async Task Send()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var message = new Message()
        {
            Id = Guid.Empty,
            UserEmail = authState.User.Identity.Name,
            HandleName = authState.User.Claims.FirstOrDefault(each => each.Type == "HandleName")?.Value,
            MessageContext = _messageInput,
            RoomId = RoomId
        };

        _fragment = null;
        _messageInput = string.Empty;

        await _hubConnection.SendAsync(SignalRMehod.SendMessage, message);
    }

    /// <summary>
    /// メッセージを更新します。
    /// </summary>
    private async Task RefreshAsync()
    {
        var nowDate = DateTime.Now;
        var request = new ChatPostPostRequest() { RoomId = RoomId, NeedMessageTailDate = nowDate };


        var response = await HttpClient.PostAsJsonAsync<ChatPostPostRequest>("Post", request);

        Messages = await response.Content.ReadFromJsonAsync<List<Message>>();
    }

    /// <summary>
    /// 最後のアンカーにスクロールするためにナビゲーションします。ただし、全ての描画が終わっている必要があります。
    /// </summary>
    private void NavigateToLast()
    {
        var count = Messages.Count;
        if (count == 0)
            return;

        var message = Messages[count - 1];

        var url = NavigationManager.Uri.Split("#");
        if (url.Length == 1 || url.Length >= 2 && Guid.TryParse(url[1], out var lastMessageId) && lastMessageId != message.Id)
        {
            if (url.Length >= 2)
                _fragment = url[1];

            NavigationManager.NavigateTo($"{url[0]}#{message.Id}", true);
        }
    }

    private void OnInput(ChangeEventArgs e)
    {
        _messageInput = e.Value.ToString();
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.AltKey && (e.Code == "Enter" || e.Code == "NumpadEnter"))
        {
            if (string.IsNullOrWhiteSpace(_messageInput))
                return;

            await Send();
        }
    }

    public async Task Focus(string elementId)
    {
        await JSRuntime.InvokeVoidAsync("focusElement", elementId);
    }

    public void Dispose()
    {
        _ = _hubConnection.DisposeAsync();
    }
}