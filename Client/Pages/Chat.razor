@page "/chat/{roomId:guid}"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json
@using blazorTest.Shared;
@using blazorTest.Shared.Models;
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
@implements IDisposable

<AuthorizeView>
    <Authorized>
        <div class="form-group">
            <label>
                Message:
                <input @bind="messageInput" size="50" />
            </label>
        </div>
        <button @onclick="Send" disabled="@(!IsConnected)">Send</button>

        <hr />

        <ul id="messageList">
            @foreach (var message in messages)
            {
                <li>@message.HandleName : @message.MessageContext</li>
            }
        </ul>
    </Authorized>
</AuthorizeView>

@code {
    private HubConnection hubConnection;

    private List<Message> messages = new List<Message>();

    private string messageInput;

    [Parameter]
    public Guid roomId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<Message>(
            SignalRMehod.ReceiveMessage, (message) =>
            {
                messages.Add(message);
                StateHasChanged();
            });

        await hubConnection.StartAsync();

        var nowDate = DateTime.Now;
        var request = new ChatPostPostRequest() { RoomId = roomId, NeedMessageTailDate = nowDate };

        var response = await HttpClient
            .PostAsJsonAsync<ChatPostPostRequest>("Post", request);

        messages = await response.Content
            .ReadFromJsonAsync<List<Message>>();

    }

    async Task Send()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var message = new Message()
        {
            UserEmail = authState.User.Identity.Name,
            HandleName = authState.User.Claims.FirstOrDefault(each => each.Type == "HandleName")?.Value,
            MessageContext = messageInput,
            RoomId = roomId
        };

        await hubConnection.SendAsync(
            SignalRMehod.SendMessage, message);
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

}