@page "/chat/{roomId:guid}"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Authorization
@using System.Text.Json
@using blazorTest.Shared;
@using blazorTest.Shared.Models;
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
@implements IDisposable

<style type="text/css">
    .layout {
        display: grid;
        height: calc(100vh - 100px);
        grid-template-columns: 1fr;
        grid-template-rows: calc(100vh - 150px) 50px; /* adjustment */
    }

    .content {
        grid-column: 1;
        grid-row: 1;
        overflow-y: scroll;
    }

    .input {
        grid-column: 1;
        grid-row: 2;
    }
</style>

<div class="layout">
    <AuthorizeView>
        <Authorized>
            <div class="content">
                @foreach (var message in messages)
                {
                    <PostItem Name="@message.HandleName" Message="@message.MessageContext" />
                }
                <hr id="end" />
           </div>
            <div class="form-group" input>
                <label>
                    <input value="@_messageInput" @oninput="OnInput" size="100" @onkeydown="OnKeyDown" />
                    <button id="sender" @onclick="Send">Send(Alt+Enter)</button>
                </label>
            </div>

        </Authorized>
    </AuthorizeView>
</div>

@code {
    private HubConnection hubConnection;

    private List<Message> messages = new List<Message>();

    private string _messageInput;

    private Guid _roomId;

    [Parameter]
    public Guid RoomId
    {
        get => _roomId;
        set
        {
            _roomId = value;
            StateHasChanged();
        }
    }

    private void OnInput(ChangeEventArgs e)
    {
        _messageInput = e.Value.ToString();
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.AltKey && (e.Code == "Enter" || e.Code == "NumpadEnter"))
        {
            if (string.IsNullOrWhiteSpace(_messageInput))
                return;

            await Send();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<Message>(
            SignalRMehod.ReceiveMessage, (message) =>
            {
                messages.Add(message);
                StateHasChanged();
            });

        await hubConnection.StartAsync();

        await RefreshAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await RefreshAsync();
    }

    async Task Send()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var message = new Message()
        {
            UserEmail = authState.User.Identity.Name,
            HandleName = authState.User.Claims.FirstOrDefault(each => each.Type == "HandleName")?.Value,
            MessageContext = _messageInput,
            RoomId = RoomId
        };

        await hubConnection.SendAsync(SignalRMehod.SendMessage, message);

        _messageInput = string.Empty;

        NavigationManager.NavigateTo($"{NavigationManager.Uri}#end");
    }

    private async Task RefreshAsync()
    {
        var nowDate = DateTime.Now;
        var request = new ChatPostPostRequest() { RoomId = RoomId, NeedMessageTailDate = nowDate };


        var response = await HttpClient.PostAsJsonAsync<ChatPostPostRequest>("Post", request);

        messages = await response.Content.ReadFromJsonAsync<List<Message>>();
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}