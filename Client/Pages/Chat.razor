@page "/chat/{roomId:guid}"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Authorization
@using blazorTest.Client.Models;
@using blazorTest.Client.ViewModel;
@using blazorTest.Shared;
@using blazorTest.Shared.Models;
@using Oniqys.Blazor.ViewModel;
@using Oniqys.Blazor.Controls;
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HubUtility HubUtility
@attribute [Authorize]
@implements IDisposable
@implements Chat.IPresenter

<style type="text/css">
    .layout {
        display: grid;
        height: calc(100vh - 100px);
        grid-template-columns: 1fr auto;
        grid-template-rows: calc(100vh - 150px) 50px; /* adjustment */
    }

    .content {
        grid-column: 1;
        grid-row: 1;
        overflow-y: auto;
    }

    .userlist {
        grid-column: 2;
        grid-row: 1;
        overflow-y: auto;
        margin-right: 10px;
        background-color: #090040;
    }

    .input {
        grid-column: 1;
        grid-row: 2;
    }

    .margin {
        margin: 8px;
    }

    .margin-left {
        margin-left: 8px;
    }

    .inputbox {
        height: 48px;
    }

    .header {
        height: 48px;
    }
</style>

<div class="layout">
    <AuthorizeView>
        <Authorized>
            <div class="userlist">
                <div class="header">
                    <button class="col-md-auto margin btn btn-info" @onclick="AddUsers">反映</button>
                    <button class="col-md-auto margin btn btn-danger" @onclick="LeaveRoom">退室</button>
                </div>
                <div style="margin-top: 10px;">
                    <UserSelector Users="@ViewModel.Users" />
                </div>
                <div class="@IsCollapsed">
                    @foreach (var thread in Threads)
                    {
                        <div id="@thread.ThreadId" class="margin">
                            <PostItem Name="@thread.HandleName" Message="@thread.MessageContext" CreateDate="@thread.CreateDate" />
                        </div>
                    }
                    <div class="form-group margin-left input">
                        <div class="row margin">
                            <textarea class="col margin inputbox" value="@_threadMessageInput" @oninput="OnThreadInput" id="threadMessageInput" />
                            <button class="col-md-auto margin btn btn-primary" id="threadSender" @onclick="SendThread">送信</button>
                        </div>
                    </div>
                </div>
            </div>
            <div class="content margin-left">
                @foreach (var message in Messages)
                {
                    <div id="@message.Id" class="margin">
                        <PostItem Name="@message.HandleName" Message="@message.MessageContext" CreateDate="@message.CreateDate" />
                        <button class="col-md-auto margin btn btn-primary btn-sm" id="openThread" @onclick="(() => OpenThread(message.Id))">Threadを開く</button>
                    </div>
                }
            </div>
            <div class="form-group margin-left input">
                <div class="row margin">
                    <textarea class="col margin inputbox" @bind="@ViewModel.InputText" @onkeydown="OnKeyDown" id="messageInput" />
                    <Button Class="col-md-auto margin btn btn-primary" Context="button_context" DataContext="ViewModel.MessageSender">送信(Alt+Enter)</Button>
                </div>
            </div>
            <AnchorNavigation />
        </Authorized>
    </AuthorizeView>
</div>

@code {

    public record UserInfo
    {
        public string Id { get; init; }

        public string Name { get; init; }
    }

    public interface IPresenter
    {
        Task<UserInfo> GetUserAsync();

        HttpClient GetHttpClient();

        NavigationManager GetNavigationManager();

        HubConnection GetHabConnection();
    }

    public async Task<UserInfo> GetUserAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;

        return new() { Id = user.Identity.Name, Name = user.Claims.FirstOrDefault(each => each.Type == "HandleName")?.Value };
    }


    public HttpClient GetHttpClient() => HttpClient;

    public NavigationManager GetNavigationManager() => NavigationManager;

    public HubConnection GetHabConnection() => _hubConnection;

    private HubConnection _hubConnection;

    List<Message> _messages = new List<Message>();

    private List<Message> Messages
    {
        get => _messages;
        set
        {
            _messages = value;
            StateHasChanged();
        }
    }

    private string _fragment;

    private Guid _roomId;

    private bool collapseThreadtab = true;

    private string IsCollapsed => collapseThreadtab ? "collapse" : null;

    private string _threadMessageInput;

    private Guid _threadPostId;

    private List<ThreadMessage> Threads = new List<ThreadMessage>();

    private async Task OpenThread(Guid id)
    {
        if (collapseThreadtab)
        {
            _threadPostId = id;
            collapseThreadtab = false;
            Threads = await HttpClient.GetFromJsonAsync<List<ThreadMessage>>("Thread/Post/" + id.ToString());

            return;
        }
        else if (_threadPostId == id)
        {
            _threadPostId = Guid.Empty;
            collapseThreadtab = true;
        }
        else
        {
            _threadPostId = id;
            Threads = await HttpClient.GetFromJsonAsync<List<ThreadMessage>>("Thread/Post/" + id.ToString());

        }
    }

    private void OnThreadInput(ChangeEventArgs e)
    {
        _threadMessageInput = e.Value.ToString();
    }

    private async Task SendThread()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var message = new ThreadMessage()
        {
            ThreadId = Guid.Empty,
            PostId = _threadPostId,
            UserEmail = authState.User.Identity.Name,
            HandleName = authState.User.Claims.FirstOrDefault(each => each.Type == "HandleName")?.Value,
            MessageContext = _threadMessageInput,
            RoomId = RoomId
        };

        _threadMessageInput = string.Empty;

        await HttpClient.PostAsJsonAsync("Thread", message);
    }

    private ChatViewModel ViewModel { get; set; }

    [Parameter]
    public Guid RoomId
    {
        get => _roomId;
        set
        {
            if (_roomId == value)
                return;

            _roomId = value;
            // TODO  :  ここを綺麗にしたい
            ViewModel = new ChatViewModel(this as IPresenter, _roomId);
            _fragment = null;
            Messages = new List<Message>();
        }
    }

    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        ViewModel = new ChatViewModel(this as IPresenter, _roomId);

        _hubConnection = HubUtility.CreateHubConnection();

        _hubConnection.On<Message>(SignalRMehod.ReceiveMessage, (message) =>
        {
            if (message.RoomId != _roomId)
                return;

            Messages.Add(message);
            StateHasChanged();
        });

        _hubConnection.On<ThreadMessage>(SignalRMehod.SendThreadMessage, (message) =>
        {
            if (_threadPostId != message.PostId) return;

            Threads.Add(message);
            StateHasChanged();
        });

        await UpdateUsers();

        await _hubConnection.StartAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        if (string.IsNullOrEmpty(_fragment))
            await RefreshAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        NavigateToLast();
        //await Focus("messageInput");
    }

    private async Task UpdateUsers()
    {
        var roomDetail = await HttpClient.GetFromJsonAsync<RoomDetail>($"room/{_roomId}");

        var localUsers = roomDetail.Users.Select(each => each.Email).ToHashSet();

        var allUsers = await HttpClient.GetFromJsonAsync<List<UserInformation>>($"user");


        ViewModel.Users.Clear();
        foreach (var user in allUsers.Select(each =>
        {
            var exist = localUsers.Contains(each.Email);
            return new Selectable<UserInformation> { IsSelected = exist, IsEnabled = !exist, Content = each };
        }))
        {
            ViewModel.Users.Add(user);
        }
    }

    /// <summary>
    /// メッセージを更新します。
    /// </summary>
    private async Task RefreshAsync()
    {
        var nowDate = DateTime.Now;
        var request = new ChatPostPostRequest() { RoomId = RoomId, NeedMessageTailDate = nowDate };

        var response = await HttpClient.PostAsJsonAsync<ChatPostPostRequest>("Post", request);

        Messages = await response.Content.ReadFromJsonAsync<List<Message>>();
    }

    /// <summary>
    /// 最後のアンカーにスクロールするためにナビゲーションします。ただし、全ての描画が終わっている必要があります。
    /// </summary>
    private void NavigateToLast()
    {
        var count = Messages.Count;
        if (count == 0)
            return;

        var message = Messages[count - 1];

        var url = NavigationManager.Uri.Split("#");
        if (url.Length == 1 || url.Length >= 2 && Guid.TryParse(url[1], out var lastMessageId) && lastMessageId != message.Id)
        {
            if (url.Length >= 2)
                _fragment = url[1];

            NavigationManager.NavigateTo($"{url[0]}#{message.Id}", true);
        }
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (e.AltKey && (e.Code == "Enter" || e.Code == "NumpadEnter"))
        {
            if (string.IsNullOrWhiteSpace(ViewModel.InputText))
                return;

            await ViewModel.MessageSender.Command.Execute();
        }
    }

    public async Task Focus(string elementId)
    {
        await JSRuntime.InvokeVoidAsync("focusElement", elementId);
    }

    private async Task LeaveRoom()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        await RoomUtility.DeleteUserFromRoom(RoomId, authState.User.Identity.Name, HttpClient);

        NavigationManager.NavigateTo("/");
    }

    private async Task AddUsers()
    {
        await RoomUtility.AddUsersToRoom(RoomId, ViewModel.Users.Where(each => each.IsEnabled && each.IsSelected).Select(each => each.Content.Email).ToList(), HttpClient);

        await UpdateUsers();
    }

    public void Dispose()
    {
        _ = _hubConnection.DisposeAsync();
    }
}