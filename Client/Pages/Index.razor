@using Microsoft.AspNetCore.Authorization
@using blazorTest.Shared.Models
@using blazorTest.Client.Services
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient
@inject IRoomManager RoomManager
@attribute [Authorize]
@page "/"

<style type="text/css">
    .margin {
        margin: 2px;
    }

    .margin8 {
        margin: 8px;
    }
</style>

<div>
    <AuthorizeView>
        <Authorized>
            <div class="margin8">
                @{ userEmail = context.User.Identity.Name;}
                @if (rooms is null)
                {
                    <div>ルームを読み取り中…</div>
                }
                else if (rooms.Count == 0)
                {
                }
                else
                {
                    <nav class="navbar navbar-dark bg-dark">
                        <span class="navbar-brand mb-0 h1 text-white-50">チャットルームを選択してください</span>
                    </nav>
                    <div class="d-flex flex-wrap">
                        @foreach (var room in rooms)
                        {
                            <NavLink class="btn btn-secondary margin8" href=@("chat/" + room.Id)>
                                <span class="oi oi-document" aria-hidden="true"></span>@room.Name
                            </NavLink>
                        }
                    </div>
                }
                <hr />

                <div class="d-flex flex-wrap">
                    <input class="margin8" type="text" @bind="newRoomName" />
                    <button class="btn btn-primary" @onclick="CreateRoom">新規ルーム作成</button>
                </div>
            </div>
        </Authorized>
    </AuthorizeView>

</div>

@code {
    private bool CanCareateNewRoom => !string.IsNullOrWhiteSpace(newRoomName);

    private string newRoomName = string.Empty;

    private string userEmail;

    private List<UserRoom> rooms;

    protected override async Task OnInitializedAsync()
    {
        RoomManager.RoomChanged += (s, e) =>
        {
            rooms = e;
            StateHasChanged();
        };

        await RefreshRooms();
    }

    private async Task CreateRoom()
    {
        if (!CanCareateNewRoom)
            return;

        var result = await HttpClient.PostAsJsonAsync<CreateRoom>("Room", new CreateRoom { RoomName = newRoomName, UserIds = new List<string> { userEmail } });

        await RefreshRooms();
    }

    private async Task RefreshRooms()
    {
        RoomManager.RaiseRoomChanged(this, await HttpClient.GetFromJsonAsync<List<UserRoom>>("Room"));
    }
}
