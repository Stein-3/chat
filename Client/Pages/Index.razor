@using Microsoft.AspNetCore.Authorization
@using ChatApp.Shared.Models
@using ChatApp.Client.Services
@using ChatApp.Client.Models
@using Oniqys.Blazor.ViewModel
@inject NavigationManager NavigationManager
@inject IHttpClientFactory IHttpClientFactory
@inject IRoomManager RoomManager
@attribute [Authorize]
@page "/"

<style type="text/css">
    .margin {
        margin: 2px;
    }

    .margin8 {
        margin: 8px;
    }
</style>

<div>
    <AuthorizeView>
        <Authorized>
            <div class="margin8">
                @{ userEmail = context.User.Identity.Name;}
                @if (indexModel.RoomModels is null)
                {
                    <div>ルームを読み取り中…</div>
                }
                else if (indexModel.RoomModels.Count == 0)
                {
                }
                else
                {
                    <nav class="navbar navbar-dark bg-dark">
                        <span class="navbar-brand mb-0 h1 text-white-50">チャットルームを選択してください</span>
                    </nav>
                    <div class="d-flex flex-wrap">
                        @foreach (var room in indexModel.RoomModels)
                        {
                            <NavLink class="btn btn-secondary margin8" href=@("chat/" + room.RoomId)>
                                <span class="oi oi-document" aria-hidden="true"></span>@room.RoomName
                            </NavLink>
                        }
                    </div>
                }
                <hr />

                <div class="d-flex flex-wrap">
                    <input class="margin8" type="text" @bind="newRoomName" />
                    <button class="btn btn-primary" @onclick="CreateRoomAsync">新規ルーム作成</button>
                </div>
            </div>
        </Authorized>
    </AuthorizeView>
</div>

@code {
    private bool CanCareateNewRoom => !string.IsNullOrWhiteSpace(newRoomName);

    private string newRoomName = string.Empty;

    private string userEmail;

    private IndexModel indexModel;

    protected override async Task OnInitializedAsync()
    {

        indexModel = new IndexModel(IHttpClientFactory);

        indexModel.RoomListChanged += ChangeRoomsEvent;

        await indexModel.GetUserBelongedRoomsAsync();

        StateHasChanged();
    }

    private void ChangeRoomsEvent(Object sender, List<RoomModel> e)
    {
        if (e.Equals(indexModel.RoomModels))
        {
            StateHasChanged();
        }
    }

    private async Task CreateRoomAsync()
    {
        if (!CanCareateNewRoom)
            return;

        await indexModel.CreateRoomAsync(newRoomName, new List<string> { userEmail });
    }

    public void Dispose() => indexModel.RoomListChanged -= ChangeRoomsEvent;
}